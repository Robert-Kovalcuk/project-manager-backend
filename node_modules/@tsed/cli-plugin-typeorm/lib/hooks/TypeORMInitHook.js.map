{"version":3,"file":"TypeORMInitHook.js","sourceRoot":"","sources":["../../src/hooks/TypeORMInitHook.ts"],"names":[],"mappings":";;;;AACA,6CAAiI;AACjI,iCAAoC;AACpC,uDAAkD;AAElD,SAAS,WAAW,CAAC,GAAmB;;IACtC,OAAO,CAAA,MAAA,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,0CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,KAAI,EAAE,CAAC;AAC5F,CAAC;AAGD,IAAa,eAAe,GAA5B,MAAa,eAAe;IAiB1B,MAAM,CAAC,GAAmB;QACxB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAE7B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAElC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAC;SACX;QAED,OAAO;YACL;gBACE,KAAK,EAAE,kCAAkC;gBACzC,IAAI,EAAE,KAAK,IAAI,EAAE,CACf,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,SAAS,EAAE;oBAC5C,UAAU,EAAE,mBAAmB;oBAC/B,UAAU,EAAE,mBAAmB;iBAChC,CAAC;aACL;YACD;gBACE,KAAK,EAAE,gCAAgC;gBACvC,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC;aACnE;YACD;gBACE,KAAK,EAAE,uCAAuC;gBAC9C,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;aACnF;SACF,CAAC;IACJ,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YAC1B,OAAO,EAAE,cAAc;SACxB,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,GAAmB;QACjC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,kBAAkB,CAAC,GAAmB;QACpC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;CACF,CAAA;AA3DC;IADC,iBAAM,EAAE;sCACG,uBAAU;mDAAC;AAGvB;IADC,iBAAM,EAAE;sCACc,6BAAkB;oDAAC;AAG1C;IADC,iBAAM,EAAE;sCACe,8BAAmB;qDAAC;AAG5C;IADC,iBAAM,EAAE;sCACc,6BAAkB;oDAAC;AAG1C;IADC,iBAAM,EAAE;sCACuB,+BAAoB;6DAAC;AAGrD;IADC,iBAAM,CAAC,MAAM,CAAC;;;;6CA8Bd;AA9CU,eAAe;IAD3B,eAAU,EAAE;GACA,eAAe,CA6D3B;AA7DY,0CAAe","sourcesContent":["import {InitCmdContext} from \"@tsed/cli\";\nimport {CliDockerComposeYaml, Inject, OnExec, ProjectPackageJson, RootRendererService, SrcRendererService} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {CliTypeORM} from \"../services/CliTypeORM\";\n\nfunction getDatabase(ctx: InitCmdContext) {\n  return ctx.features.find(({type}) => type.includes(\"typeorm:\"))?.type.split(\":\")[1] || \"\";\n}\n\n@Injectable()\nexport class TypeORMInitHook {\n  @Inject()\n  cliTypeORM: CliTypeORM;\n\n  @Inject()\n  protected packageJson: ProjectPackageJson;\n\n  @Inject()\n  protected rootRenderer: RootRendererService;\n\n  @Inject()\n  protected srcRenderer: SrcRendererService;\n\n  @Inject()\n  protected cliDockerComposeYaml: CliDockerComposeYaml;\n\n  @OnExec(\"init\")\n  onExec(ctx: InitCmdContext) {\n    this.addScripts();\n    this.addDependencies(ctx);\n    this.addDevDependencies(ctx);\n\n    const database = getDatabase(ctx);\n\n    if (!database) {\n      return [];\n    }\n\n    return [\n      {\n        title: `Generate TypeORM connection file`,\n        task: async () =>\n          this.cliTypeORM.generateConnection(\"default\", {\n            symbolPath: \"DefaultConnection\",\n            symbolName: \"DefaultConnection\"\n          })\n      },\n      {\n        title: \"Generate TypeORM configuration\",\n        task: async () => this.cliTypeORM.writeConfig(\"default\", database)\n      },\n      {\n        title: \"Generate docker-compose configuration\",\n        task: async () => this.cliDockerComposeYaml.addDatabaseService(database, database)\n      }\n    ];\n  }\n\n  addScripts() {\n    this.packageJson.addScripts({\n      typeorm: \"tsed typeorm\"\n    });\n  }\n\n  addDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDependencies({}, ctx);\n  }\n\n  addDevDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDevDependencies({}, ctx);\n  }\n}\n"]}