"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeORMInitHook = void 0;
const tslib_1 = require("tslib");
const cli_core_1 = require("@tsed/cli-core");
const di_1 = require("@tsed/di");
const CliTypeORM_1 = require("../services/CliTypeORM");
function getDatabase(ctx) {
    var _a;
    return ((_a = ctx.features.find(({ type }) => type.includes("typeorm:"))) === null || _a === void 0 ? void 0 : _a.type.split(":")[1]) || "";
}
let TypeORMInitHook = class TypeORMInitHook {
    onExec(ctx) {
        this.addScripts();
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        const database = getDatabase(ctx);
        if (!database) {
            return [];
        }
        return [
            {
                title: `Generate TypeORM connection file`,
                task: async () => this.cliTypeORM.generateConnection("default", {
                    symbolPath: "DefaultConnection",
                    symbolName: "DefaultConnection"
                })
            },
            {
                title: "Generate TypeORM configuration",
                task: async () => this.cliTypeORM.writeConfig("default", database)
            },
            {
                title: "Generate docker-compose configuration",
                task: async () => this.cliDockerComposeYaml.addDatabaseService(database, database)
            }
        ];
    }
    addScripts() {
        this.packageJson.addScripts({
            typeorm: "tsed typeorm"
        });
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({}, ctx);
    }
};
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", CliTypeORM_1.CliTypeORM)
], TypeORMInitHook.prototype, "cliTypeORM", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], TypeORMInitHook.prototype, "packageJson", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.RootRendererService)
], TypeORMInitHook.prototype, "rootRenderer", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], TypeORMInitHook.prototype, "srcRenderer", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.CliDockerComposeYaml)
], TypeORMInitHook.prototype, "cliDockerComposeYaml", void 0);
tslib_1.__decorate([
    cli_core_1.OnExec("init"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], TypeORMInitHook.prototype, "onExec", null);
TypeORMInitHook = tslib_1.__decorate([
    di_1.Injectable()
], TypeORMInitHook);
exports.TypeORMInitHook = TypeORMInitHook;
//# sourceMappingURL=TypeORMInitHook.js.map