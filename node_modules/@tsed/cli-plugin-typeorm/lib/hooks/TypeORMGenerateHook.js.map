{"version":3,"file":"TypeORMGenerateHook.js","sourceRoot":"","sources":["../../src/hooks/TypeORMGenerateHook.ts"],"names":[],"mappings":"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","sourcesContent":["import {FEATURES_TYPEORM_CONNECTION_TYPES, GenerateCmdContext, ProvidersInfoService} from \"@tsed/cli\";\nimport {CliDockerComposeYaml, Inject, OnExec, OnPrompt, ProjectPackageJson, SrcRendererService, Tasks} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {paramCase} from \"change-case\";\nimport {CliTypeORM} from \"../services/CliTypeORM\";\n\nexport interface TypeORMGenerateOptions extends GenerateCmdContext {\n  typeormConnection: string;\n  connectionName: string;\n}\n\n@Injectable()\nexport class TypeORMGenerateHook {\n  @Inject()\n  projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  srcRenderService: SrcRendererService;\n\n  @Inject()\n  cliTypeORM: CliTypeORM;\n\n  packages: any[];\n\n  @Inject()\n  protected cliDockerComposeYaml: CliDockerComposeYaml;\n\n  constructor(private providersInfoService: ProvidersInfoService) {\n    providersInfoService.add(\n      {\n        name: \"TypeORM Connection\",\n        value: \"typeorm:connection\",\n        model: \"{{symbolName}}.connection\"\n      },\n      TypeORMGenerateHook\n    );\n  }\n\n  @OnPrompt(\"generate\")\n  async onGeneratePrompt() {\n    const list = FEATURES_TYPEORM_CONNECTION_TYPES.map((item) => {\n      return {\n        name: item.name,\n        value: item.value.type\n      };\n    });\n\n    return [\n      {\n        type: \"autocomplete\",\n        name: \"typeormConnection\",\n        message: \"Which passport package ?\",\n        when(state: any) {\n          return [\"typeorm:connection\"].includes(state.type);\n        },\n        source: async (state: any, keyword: string) => {\n          if (keyword) {\n            return list.filter((item) => item.name.toLowerCase().includes(keyword.toLowerCase()));\n          }\n\n          return list;\n        }\n      }\n    ];\n  }\n\n  @OnExec(\"generate\")\n  onGenerateExec(ctx: TypeORMGenerateOptions): Tasks {\n    if (this.providersInfoService.isMyProvider(ctx.type, TypeORMGenerateHook)) {\n      ctx = this.mapOptions(ctx);\n      const {typeormConnection, symbolPath} = ctx;\n      const connection = FEATURES_TYPEORM_CONNECTION_TYPES.find((item) => item.value.type === typeormConnection);\n\n      if (connection?.value?.dependencies) {\n        this.projectPackageJson.addDependencies(connection?.value.dependencies || {});\n      }\n\n      const database = ctx.typeormConnection.split(\":\")[1];\n\n      return [\n        {\n          title: `Generate TypeORM connection file to '${symbolPath}.ts'`,\n          task: () => this.cliTypeORM.generateConnection(ctx.name, ctx)\n        },\n        {\n          title: `Generate TypeORM configuration file to '${ctx.connectionName}.config.json'`,\n          task: () => this.cliTypeORM.writeConfig(ctx.connectionName, database)\n        },\n        {\n          title: \"Generate docker-compose configuration\",\n          task: async () => this.cliDockerComposeYaml.addDatabaseService(ctx.name, database)\n        }\n      ];\n    }\n\n    return [];\n  }\n\n  private mapOptions(options: TypeORMGenerateOptions) {\n    return {\n      ...options,\n      connectionName: paramCase(options.name).replace(\"-connection\", \"\")\n    };\n  }\n}\n"]}