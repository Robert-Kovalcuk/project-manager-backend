{"version":3,"file":"CliTypeORM.js","sourceRoot":"","sources":["../../src/services/CliTypeORM.ts"],"names":[],"mappings":"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","sourcesContent":["import {CliExeca, Inject, ProjectPackageJson, SrcRendererService} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {camelCase, constantCase} from \"change-case\";\nimport {basename, join} from \"path\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\n@Injectable()\nexport class CliTypeORM {\n  @Inject()\n  cliExeca: CliExeca;\n\n  @Inject()\n  projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  protected srcRenderer: SrcRendererService;\n\n  run(command: string, args: string[], options: any = {}) {\n    return this.cliExeca.run(\"npx\", [\"typeorm\", command, ...args], {\n      ...options,\n      cwd: this.projectPackageJson.dir\n    });\n  }\n\n  async generateConnection(name: string, options: any = {}) {\n    return this.srcRenderer.render(\n      \"connection.hbs\",\n      {\n        ...options,\n        symbolName: constantCase(options.symbolName),\n        connectionName: name\n      },\n      {\n        templateDir: TEMPLATE_DIR,\n        output: `${options.symbolPath}.ts`,\n        rootDir: join(this.srcRenderer.rootDir, \"services\", \"connections\")\n      }\n    );\n  }\n\n  async writeConfig(name: string, database: string) {\n    const {InitCommand} = await this.projectPackageJson.importModule(\"typeorm/commands/InitCommand.js\");\n\n    const content = {\n      name,\n      ...JSON.parse(await InitCommand.getOrmConfigTemplate(database))\n    };\n\n    function replace(path: string | undefined) {\n      return path && path.replace(\"src/\", \"${rootDir}/\").replace(/\\.ts/, \".{js,ts}\");\n    }\n\n    content.entities = content.entities?.map(replace);\n    content.migrations = content.migrations?.map(replace);\n    content.subscribers = content.subscribers?.map(replace);\n\n    if (content.cli) {\n      content.cli.entitiesDir = replace(content.cli.entitiesDir);\n      content.cli.migrationsDir = replace(content.cli.migrationsDir);\n      content.cli.subscribersDir = replace(content.cli.subscribersDir);\n    }\n\n    await this.srcRenderer.write(JSON.stringify(content, null, 2), {output: `config/typeorm/${name}.config.json`});\n\n    return this.regenerateIndexConfig();\n  }\n\n  async regenerateIndexConfig() {\n    const list = await this.srcRenderer.scan([\"config/typeorm/*.config.json\"]);\n\n    const configs = list.map((file: string) => {\n      const name = basename(file).replace(/\\.config\\.json/gi, \"\");\n\n      return {\n        name,\n        symbolName: camelCase(name)\n      };\n    });\n\n    return this.srcRenderer.render(\n      \"index.hbs\",\n      {\n        configs\n      },\n      {\n        templateDir: TEMPLATE_DIR,\n        output: \"index.ts\",\n        rootDir: join(this.srcRenderer.rootDir, \"config\", \"typeorm\")\n      }\n    );\n  }\n}\n"]}