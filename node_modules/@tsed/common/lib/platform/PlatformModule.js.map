{"version":3,"file":"PlatformModule.js","sourceRoot":"","sources":["../../src/platform/PlatformModule.ts"],"names":[],"mappings":";;;;AAAA,iCAA+D;AAC/D,gCAAwC;AACxC,mFAA8E;AAG9E,kDAA6C;AAC7C,8DAAyD;AAEzD;;GAEG;AAIH,IAAa,cAAc,GAA3B,MAAa,cAAc;IACzB,YAAsB,QAAyB,EAAY,QAAkB;QAAvD,aAAQ,GAAR,QAAQ,CAAiB;QAAY,aAAQ,GAAR,QAAQ,CAAU;QAC3E,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,4BAA4B;QACjC,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QAExB,OAAO,QAAQ;aACZ,YAAY,CAAC,iBAAY,CAAC,UAAU,CAAC;aACrC,GAAG,CAAC,CAAC,QAA4B,EAAE,EAAE;YACpC,QAAQ,CAAC,SAAS,CAAC,+BAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;YAE5E,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE;gBACzB,OAAO,IAAI,qDAAyB,CAAC,QAA8B,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACtF;QACH,CAAC,CAAC;aACD,MAAM,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAEM,YAAY;QACjB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAU,QAAQ,CAAC,CAAC;QAE7D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;CACF,CAAA;AA5BY,cAAc;IAH1B,WAAM,CAAC;QACN,OAAO,EAAE,CAAC,oBAAe,EAAE,sBAAgB,EAAE,mBAAQ,CAAC;KACvD,CAAC;6CAEgC,oBAAe,EAAsB,mBAAQ;GADlE,cAAc,CA4B1B;AA5BY,wCAAc","sourcesContent":["import {InjectorService, Module, ProviderType} from \"@tsed/di\";\nimport {ConverterService} from \"../mvc\";\nimport {PlatformControllerBuilder} from \"./builder/PlatformControllerBuilder\";\nimport {ControllerProvider} from \"./domain/ControllerProvider\";\nimport {Route} from \"./interfaces/Route\";\nimport {Platform} from \"./services/Platform\";\nimport {PlatformRouter} from \"./services/PlatformRouter\";\n\n/**\n * @ignore\n */\n@Module({\n  imports: [InjectorService, ConverterService, Platform]\n})\nexport class PlatformModule {\n  constructor(protected injector: InjectorService, protected platform: Platform) {\n    this.createRoutersFromControllers();\n  }\n\n  /**\n   * Create routers from the collected controllers\n   */\n  public createRoutersFromControllers() {\n    const {injector} = this;\n\n    return injector\n      .getProviders(ProviderType.CONTROLLER)\n      .map((provider: ControllerProvider) => {\n        provider.setRouter(PlatformRouter.create(injector, provider.routerOptions));\n\n        if (!provider.hasParent()) {\n          return new PlatformControllerBuilder(provider as ControllerProvider).build(injector);\n        }\n      })\n      .filter(Boolean);\n  }\n\n  public $$loadRoutes() {\n    const routes = this.injector.settings.get<Route[]>(\"routes\");\n\n    this.platform.addRoutes(routes);\n  }\n}\n"]}