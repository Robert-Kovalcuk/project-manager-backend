{"version":3,"file":"createContext.js","sourceRoot":"","sources":["../../../src/platform/utils/createContext.ts"],"names":[],"mappings":";;;AACA,+DAA0D;AAI1D,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;AAClC,MAAM,mBAAmB,GAAG,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAEjG;;;;;;GAMG;AACI,KAAK,UAAU,aAAa,CACjC,QAAyB,EACzB,OAAwB,EACxB,QAA0B;IAE1B,MAAM,EAAC,KAAK,EAAE,iBAAiB,EAAE,YAAY,EAAE,YAAY,GAAG,mBAAmB,EAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;IAE9G,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;IACjC,MAAM,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;IAE7B,MAAM,GAAG,GAAG,IAAI,iCAAe,CAAC;QAC9B,EAAE;QACF,MAAM,EAAE,QAAQ,CAAC,MAAM;QACvB,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,iBAAiB;QACjB,KAAK;QACL,YAAY;QACZ,QAAQ;QACR,QAAQ;QACR,OAAO;KACR,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC;IAEf,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IAEvC,QAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;QACxB,MAAM,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QACnC,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;QACpB,OAAO,GAAG,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,CAAC;IAEH,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAElC,OAAO,GAAG,CAAC;AACb,CAAC;AAnCD,sCAmCC","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport {PlatformContext} from \"../domain/PlatformContext\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\n\nconst uuidv4 = require(\"uuid\").v4;\nconst defaultReqIdBuilder = (req: any) => req.get(\"x-request-id\") || uuidv4().replace(/-/gi, \"\");\n\n/**\n * Create the TsED context to wrap request, response, injector, etc...\n * @param injector\n * @param request\n * @param response\n * @ignore\n */\nexport async function createContext(\n  injector: InjectorService,\n  request: PlatformRequest,\n  response: PlatformResponse\n): Promise<PlatformContext> {\n  const {level, ignoreUrlPatterns, maxStackSize, reqIdBuilder = defaultReqIdBuilder} = injector.settings.logger;\n\n  const req = request.getRequest();\n  const id = reqIdBuilder(req);\n\n  const ctx = new PlatformContext({\n    id,\n    logger: injector.logger,\n    url: request.url,\n    ignoreUrlPatterns,\n    level,\n    maxStackSize,\n    injector,\n    response,\n    request\n  });\n\n  req.$ctx = ctx;\n\n  response.setHeader(\"x-request-id\", id);\n\n  response.onEnd(async () => {\n    await ctx.emit(\"$onResponse\", ctx);\n    await ctx.destroy();\n    delete req.$ctx;\n  });\n\n  await ctx.emit(\"$onRequest\", ctx);\n\n  return ctx;\n}\n"]}