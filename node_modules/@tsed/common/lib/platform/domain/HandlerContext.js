"use strict";
var _resolves, _rejects, _promise;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandlerContext = exports.HandlerContextStatus = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
/**
 * @ignore
 */
function isResponse(obj) {
    return obj.data && obj.headers && obj.status && obj.statusText;
}
/**
 * @ignore
 */
var HandlerContextStatus;
(function (HandlerContextStatus) {
    HandlerContextStatus["PENDING"] = "pending";
    HandlerContextStatus["CANCELED"] = "canceled";
    HandlerContextStatus["RESOLVED"] = "resolved";
    HandlerContextStatus["REJECTED"] = "rejected";
})(HandlerContextStatus = exports.HandlerContextStatus || (exports.HandlerContextStatus = {}));
class HandlerContext {
    constructor({ $ctx, err, metadata, args }) {
        this.status = HandlerContextStatus.PENDING;
        _resolves.set(this, void 0);
        _rejects.set(this, void 0);
        _promise.set(this, void 0);
        this.$ctx = $ctx;
        tslib_1.__classPrivateFieldSet(this, _promise, new Promise((resolve, reject) => {
            tslib_1.__classPrivateFieldSet(this, _resolves, resolve);
            tslib_1.__classPrivateFieldSet(this, _rejects, reject);
        }));
        err && (this.err = err);
        metadata && (this.metadata = metadata);
        args && (this.args = args || []);
        this.next = this.next.bind(this);
    }
    get request() {
        var _a;
        return (_a = this.$ctx) === null || _a === void 0 ? void 0 : _a.getRequest();
    }
    get response() {
        var _a;
        return (_a = this.$ctx) === null || _a === void 0 ? void 0 : _a.getResponse();
    }
    get isDone() {
        const { $ctx } = this;
        if (!$ctx || $ctx.isDone()) {
            return true;
        }
        if ($ctx.request.isAborted() || $ctx.response.isDone()) {
            this.destroy();
            if (this.status === HandlerContextStatus.PENDING) {
                this.status = HandlerContextStatus.RESOLVED;
            }
        }
        return this.status !== HandlerContextStatus.PENDING;
    }
    get handler() {
        const { metadata } = this;
        if (metadata.handler) {
            return metadata.handler;
        }
        if (this.metadata.scope === di_1.ProviderScope.SINGLETON) {
            if (!this.$ctx.injector.has(metadata.token)) {
                this.$ctx.injector.invoke(metadata.token);
            }
            const instance = this.$ctx.injector.get(metadata.token);
            metadata.handler = instance[metadata.propertyKey].bind(instance);
            return metadata.handler;
        }
        const instance = this.$ctx.injector.invoke(metadata.token, this.$ctx.container);
        return instance[metadata.propertyKey].bind(instance);
    }
    /**
     *
     */
    async callHandler() {
        if (this.isDone) {
            return this;
        }
        try {
            this.handle(this.handler(...this.args, this.$ctx));
        }
        catch (er) {
            this.reject(er);
        }
        return tslib_1.__classPrivateFieldGet(this, _promise);
    }
    reject(er) {
        if (this.isDone) {
            return;
        }
        this.destroy();
        this.status = HandlerContextStatus.REJECTED;
        tslib_1.__classPrivateFieldGet(this, _rejects).call(this, er);
    }
    resolve(data) {
        if (this.isDone) {
            return;
        }
        if (this.$ctx && data !== undefined) {
            this.$ctx.data = data;
        }
        this.destroy();
        this.status = HandlerContextStatus.RESOLVED;
        tslib_1.__classPrivateFieldGet(this, _resolves).call(this, data);
    }
    next(error) {
        if (this.isDone) {
            return;
        }
        return error ? this.reject(error) : this.resolve();
    }
    destroy() {
        // @ts-ignore
        delete this.$ctx;
        // @ts-ignore
        delete this.args;
        // @ts-ignore
        delete this.metadata;
        // @ts-ignore
        delete this.err;
    }
    cancel() {
        if (this.isDone) {
            return;
        }
        this.destroy();
        this.status = HandlerContextStatus.CANCELED;
        return tslib_1.__classPrivateFieldGet(this, _resolves).call(this);
    }
    handle(process) {
        if (this.isDone) {
            return;
        }
        const { metadata: { hasNextFunction }, $ctx } = this;
        if (process) {
            if (process === $ctx.getResponse()) {
                // ABANDON
                return this.cancel();
            }
            if (core_1.isObservable(process)) {
                process = process.toPromise();
            }
            if (isResponse(process)) {
                $ctx.response.setHeaders(process.headers);
                $ctx.response.status(process.status);
                return this.handle(process.data);
            }
            if (core_1.isStream(process) || Buffer.isBuffer(process)) {
                return this.resolve(process);
            }
            if (core_1.isPromise(process)) {
                return process
                    .then((result) => this.handle(result))
                    .catch((error) => {
                    if (error.response && isResponse(error.response)) {
                        return this.handle(error.response);
                    }
                    return this.reject(error);
                });
            }
        }
        if (!hasNextFunction) {
            // no next function and empty response
            return this.resolve(process);
        }
    }
}
exports.HandlerContext = HandlerContext;
_resolves = new WeakMap(), _rejects = new WeakMap(), _promise = new WeakMap();
//# sourceMappingURL=HandlerContext.js.map