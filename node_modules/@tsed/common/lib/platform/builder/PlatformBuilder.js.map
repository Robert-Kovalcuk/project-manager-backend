{"version":3,"file":"PlatformBuilder.js","sourceRoot":"","sources":["../../../src/platform/builder/PlatformBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {classOf, constructorOf, isFunction, nameOf, toMap, Type} from \"@tsed/core\";\nimport {Container, createContainer, getConfiguration, importProviders, InjectorService, IProvider, setLoggerLevel} from \"@tsed/di\";\nimport {PerfLogger} from \"@tsed/perf\";\nimport {PlatformMiddlewareLoadingOptions} from \"../../config/interfaces\";\nimport {GlobalAcceptMimesMiddleware} from \"../middlewares\";\nimport {PlatformLogMiddleware} from \"../middlewares/PlatformLogMiddleware\";\nimport {PlatformModule} from \"../PlatformModule\";\nimport {Platform} from \"../services/Platform\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {PlatformHandler} from \"../services/PlatformHandler\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\nimport {PlatformRouter} from \"../services/PlatformRouter\";\nimport {PlatformViews} from \"../services/PlatformViews\";\nimport {\n  createHttpServer,\n  createHttpsServer,\n  createInjector,\n  createPlatformApplication,\n  listenHttpServer,\n  listenHttpsServer,\n  printRoutes\n} from \"../utils\";\n\nconst SKIP_HOOKS = [\"$beforeInit\", \"$afterInit\", \"$onInit\", \"$onMountingMiddlewares\"];\n\n/**\n * @ignore\n */\nexport interface PlatformType<T = any> extends Type<T> {\n  providers: IProvider[];\n}\n\nconst {bind, start, end, log} = PerfLogger.get(\"bootstrap\");\n/**\n * @ignore\n */\nexport interface PlatformBootstrap {\n  bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<PlatformBuilder>;\n}\n\n/**\n * @platform\n */\nexport abstract class PlatformBuilder<App = TsED.Application, Router = TsED.Router> {\n  static currentPlatform: Type<PlatformBuilder> & PlatformBootstrap;\n  readonly name: string = \"\";\n  protected startedAt = new Date();\n  protected locals: Container;\n  #rootModule: any;\n  #injector: InjectorService;\n  #providers: Map<Type, IProvider>;\n\n  constructor({name, providers}: {name: string; providers: IProvider[]}) {\n    this.name = name;\n    this.#providers = toMap<any, IProvider>(providers, \"provide\");\n\n    this.locals = new Container();\n\n    this.useProvider(PlatformHandler, this.#providers.get(PlatformHandler))\n      .useProvider(PlatformResponse, this.#providers.get(PlatformResponse))\n      .useProvider(PlatformRequest, this.#providers.get(PlatformRequest))\n      .useProvider(PlatformRouter, this.#providers.get(PlatformRouter))\n      .useProvider(PlatformApplication, this.#providers.get(PlatformApplication))\n      .useProvider(Platform, this.#providers.get(Platform));\n  }\n\n  get injector(): InjectorService {\n    return this.#injector;\n  }\n\n  get rootModule(): any {\n    return this.#rootModule;\n  }\n\n  get app(): PlatformApplication<App, Router> {\n    return this.injector.get<PlatformApplication<App, Router>>(PlatformApplication)!;\n  }\n\n  get platform() {\n    return this.injector.get<Platform>(Platform)!;\n  }\n\n  /**\n   * Return the settings configured by the decorator @@Configuration@@.\n   *\n   * ```typescript\n   * @Configuration({\n   *    rootDir: Path.resolve(__dirname),\n   *    port: 8000,\n   *    httpsPort: 8080,\n   *    mount: {\n   *      \"/rest\": \"${rootDir}/controllers/**\\/*.js\"\n   *    }\n   * })\n   * export class Server {\n   *     $onInit(){\n   *         console.log(this.settings); // {rootDir, port, httpsPort,...}\n   *     }\n   * }\n   * ```\n   *\n   * @returns {PlatformConfiguration}\n   */\n  get settings() {\n    return this.injector.settings;\n  }\n\n  get logger() {\n    return this.injector.logger;\n  }\n\n  get disableBootstrapLog() {\n    return this.settings.logger.disableBootstrapLog;\n  }\n\n  static build<T extends PlatformBuilder<any, any>>(platformBuildClass: PlatformType<T>): T {\n    return new platformBuildClass({\n      name: nameOf(platformBuildClass).replace(\"Platform\", \"\").toLowerCase(),\n      providers: platformBuildClass.providers\n    });\n  }\n\n  log(...data: any[]) {\n    return this.disableBootstrapLog && this.logger.info(...data);\n  }\n\n  /**\n   * Add classes to the components list\n   * @param classes\n   */\n  public addComponents(classes: any | any[]) {\n    this.settings.componentsScan = this.settings.componentsScan.concat(classes);\n\n    return this;\n  }\n\n  /**\n   * Add classes decorated by @@Controller@@ to components container.\n   *\n   * ### Example\n   *\n   * ```typescript\n   * @Controller('/ctrl')\n   * class MyController{\n   * }\n   *\n   * platform.addControllers('/rest', [MyController])\n   * ```\n   *\n   * ::: tip\n   * If the MyController class isn't decorated, the class will be ignored.\n   * :::\n   *\n   * @param {string} endpoint\n   * @param {any[]} controllers\n   */\n  public addControllers(endpoint: string, controllers: any | string | (any | string)[]) {\n    this.settings.mount[endpoint] = (this.settings.mount[endpoint] || []).concat(controllers);\n  }\n\n  public async runLifecycle() {\n    setLoggerLevel(this.injector);\n\n    await this.importProviders();\n    await this.loadInjector();\n\n    this.useContext();\n    this.useRouter();\n\n    await this.loadRoutes();\n    await this.logRoutes();\n  }\n\n  async loadInjector() {\n    const {injector} = this;\n    await this.callHook(\"$beforeInit\");\n\n    this.log(\"Build providers\");\n    const container = createContainer(constructorOf(this.rootModule));\n\n    await injector.load(container, PlatformModule);\n\n    this.log(\"Settings and injector loaded\");\n\n    await this.callHook(\"$afterInit\");\n  }\n\n  async listen() {\n    await this.callHook(\"$beforeListen\");\n\n    await this.listenServers();\n\n    await this.callHook(\"$afterListen\");\n\n    await this.ready();\n    end();\n  }\n\n  async stop() {\n    await this.callHook(\"$onDestroy\");\n    return this.injector.destroy();\n  }\n\n  public async ready() {\n    const {startedAt} = this;\n\n    await this.callHook(\"$onReady\");\n    await this.injector.emit(\"$onServerReady\");\n\n    this.log(`Started in ${new Date().getTime() - startedAt.getTime()} ms`);\n  }\n\n  async callHook(hook: string, ...args: any[]) {\n    const {injector, rootModule} = this;\n    log(hook);\n\n    if (!injector.settings.logger.disableBootstrapLog) {\n      injector.logger.info(`\\x1B[1mCall hook ${hook}\\x1B[22m`);\n    }\n\n    // call hook for the Server\n    if (hook in rootModule) {\n      await rootModule[hook](...args);\n    }\n\n    // Load middlewares for the given hook\n    this.loadMiddlewaresFor(hook);\n\n    // call hooks added by providers\n    if (!SKIP_HOOKS.includes(hook)) {\n      await injector.emit(hook);\n    }\n  }\n\n  async loadStatics(): Promise<void> {\n    const {settings} = this;\n\n    if (settings.statics) {\n      Object.entries(settings.statics).forEach(([path, items]) => {\n        [].concat(items as any).forEach((options) => {\n          const opts =\n            typeof options === \"string\"\n              ? {\n                  root: options\n                }\n              : options;\n\n          this.platform.app.statics(path, opts);\n        });\n      });\n    }\n  }\n\n  useProvider(token: Type<any>, settings?: Partial<IProvider>) {\n    this.locals.addProvider(token, settings);\n\n    return this;\n  }\n\n  protected async importProviders() {\n    this.injector.logger.debug(\"Scan components\");\n\n    const providers = await importProviders(this.injector.settings, [\"imports\", \"mount\", \"componentsScan\"]);\n    const routes = providers.filter((provider) => !!provider.route).map(({route, token}) => ({route, token}));\n\n    this.settings.set(\"routes\", routes);\n  }\n\n  protected createRequest(req: any): PlatformRequest {\n    const Klass = this.#providers.get(PlatformRequest)!.useClass!;\n\n    return new Klass(req);\n  }\n\n  protected createResponse(res: any): PlatformResponse {\n    const Klass = this.#providers.get(PlatformResponse)!.useClass!;\n    const response = new Klass(res);\n    response.platformViews = this.injector.get<PlatformViews>(PlatformViews)!;\n\n    return response;\n  }\n\n  /**\n   * Load middlewares from configuration for the given hook\n   * @param hook\n   * @protected\n   */\n  protected loadMiddlewaresFor(hook: string): void {\n    const {settings} = this;\n    const {env, middlewares = []} = settings;\n    const defaultHook = \"$beforeRoutesInit\";\n\n    middlewares\n      .map<PlatformMiddlewareLoadingOptions>((middleware) => {\n        return isFunction(middleware)\n          ? {\n              env,\n              hook: defaultHook,\n              use: middleware\n            }\n          : {\n              env,\n              hook: defaultHook,\n              ...middleware\n            };\n      })\n      .filter((options) => {\n        return options.use && options.env === env && options.hook === hook;\n      })\n      .forEach(({use}) => {\n        this.app.use(use);\n      });\n  }\n\n  protected useRouter(): this {\n    return this;\n  }\n\n  protected useContext(): this {\n    return this;\n  }\n\n  protected async bootstrap(module: Type<any>, settings: Partial<TsED.Configuration> = {}) {\n    // istanbul ignore next\n    if (settings.logger?.perf) {\n      start();\n      bind(this);\n      settings.logger = {\n        ...settings.logger,\n        level: \"off\"\n      };\n    }\n\n    this.createInjector(module, {\n      ...settings,\n      PLATFORM_NAME: this.name\n    });\n    this.createRootModule(module);\n\n    await this.runLifecycle();\n\n    return this;\n  }\n\n  protected async listenServers(): Promise<void> {\n    await Promise.all([listenHttpServer(this.injector), listenHttpsServer(this.injector)]);\n  }\n\n  protected async logRoutes() {\n    const {logger, platform} = this;\n\n    if (!this.settings.logger.disableRoutesSummary && !this.disableBootstrapLog) {\n      logger.info(\"Routes mounted :\");\n      logger.info(printRoutes(await this.injector.alterAsync(\"$logRoutes\", platform.getRoutes())));\n    }\n  }\n\n  protected async loadRoutes() {\n    // istanbul ignore next\n    if (this.settings.logger.level !== \"off\") {\n      this.app.use(PlatformLogMiddleware);\n    }\n\n    if (this.settings.acceptMimes?.length) {\n      this.app.use(GlobalAcceptMimesMiddleware);\n    }\n\n    this.log(\"Load routes\");\n    await this.callHook(\"$beforeRoutesInit\");\n\n    await this.callHook(\"$$loadRoutes\");\n\n    await this.callHook(\"$onRoutesInit\");\n\n    await this.loadStatics();\n\n    await this.callHook(\"$afterRoutesInit\");\n  }\n\n  protected createInjector(module: Type<any>, settings: any) {\n    const configuration = getConfiguration(module, settings);\n\n    this.#injector = createInjector(configuration);\n\n    // configure locals providers\n    this.locals.forEach((provider) => {\n      this.injector.addProvider(provider.token, provider);\n    });\n\n    createPlatformApplication(this.injector);\n    createHttpsServer(this.injector);\n    createHttpServer(this.injector);\n  }\n\n  protected createRootModule(module: Type<any>) {\n    this.#rootModule = this.injector.invoke(module);\n\n    this.injector.delete(constructorOf(this.#rootModule));\n    this.injector.delete(classOf(this.#rootModule));\n  }\n}\n"]}