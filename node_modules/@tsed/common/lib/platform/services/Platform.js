"use strict";
var _routes, _controllers;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const PlatformRouteDetails_1 = require("../domain/PlatformRouteDetails");
const getControllerPath_1 = require("../utils/getControllerPath");
const PlatformApplication_1 = require("./PlatformApplication");
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
let Platform = class Platform {
    constructor(injector, platformApplication) {
        this.injector = injector;
        this.platformApplication = platformApplication;
        _routes.set(this, []);
        _controllers.set(this, []);
    }
    get app() {
        return this.platformApplication;
    }
    get routes() {
        return tslib_1.__classPrivateFieldGet(this, _routes);
    }
    addRoutes(routes) {
        routes.forEach((routeSettings) => {
            this.addRoute(routeSettings.route, routeSettings.token);
        });
    }
    addRoute(endpoint, token) {
        const { injector } = this;
        if (injector.hasProvider(token)) {
            const provider = injector.getProvider(token);
            if (provider.type === di_1.ProviderType.CONTROLLER) {
                const route = getControllerPath_1.getControllerPath(endpoint, provider);
                if (!provider.hasParent()) {
                    const routes = this.buildRoutes(route, provider);
                    tslib_1.__classPrivateFieldGet(this, _routes).push(...routes);
                    tslib_1.__classPrivateFieldGet(this, _controllers).push({
                        route,
                        provider
                    });
                    this.app.use(route, ...[].concat(provider.getRouter().callback()));
                }
            }
        }
        return this;
    }
    /**
     * Get all routes built by TsExpressDecorators and mounted on Express application.
     * @returns {PlatformRouteDetails[]}
     */
    getRoutes() {
        return tslib_1.__classPrivateFieldGet(this, _routes);
    }
    getMountedControllers() {
        return tslib_1.__classPrivateFieldGet(this, _controllers);
    }
    /**
     *
     * @param ctrl
     * @param endpointUrl
     */
    buildRoutes(endpointUrl, ctrl) {
        const { injector } = this;
        let routes = [];
        routes = ctrl.children
            .map((ctrl) => injector.getProvider(ctrl))
            .reduce((routes, provider) => {
            return routes.concat(this.buildRoutes(`${endpointUrl}${provider.path}`, provider));
        }, routes);
        ctrl.endpoints.forEach((endpoint) => {
            endpoint.operationPaths.forEach(({ path, method }) => {
                if (method) {
                    routes.push(new PlatformRouteDetails_1.PlatformRouteDetails({
                        provider: ctrl,
                        endpoint,
                        method,
                        url: `${endpointUrl}${path || ""}`.replace(/\/\//gi, "/")
                    }));
                }
            });
        });
        return routes;
    }
};
_routes = new WeakMap(), _controllers = new WeakMap();
Platform = tslib_1.__decorate([
    di_1.Injectable({
        scope: di_1.ProviderScope.SINGLETON
    }),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService, PlatformApplication_1.PlatformApplication])
], Platform);
exports.Platform = Platform;
//# sourceMappingURL=Platform.js.map