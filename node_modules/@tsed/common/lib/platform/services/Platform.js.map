{"version":3,"file":"Platform.js","sourceRoot":"","sources":["../../../src/platform/services/Platform.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, InjectorService, ProviderScope, ProviderType, TokenProvider} from \"@tsed/di\";\nimport {EndpointMetadata} from \"../../mvc\";\nimport {ControllerProvider} from \"../domain/ControllerProvider\";\nimport {PlatformRouteDetails} from \"../domain/PlatformRouteDetails\";\nimport {Route, RouteController} from \"../interfaces/Route\";\nimport {getControllerPath} from \"../utils/getControllerPath\";\nimport {PlatformApplication} from \"./PlatformApplication\";\n\n/**\n * `Platform` is used to provide all routes collected by annotation `@Controller`.\n *\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class Platform {\n  #routes: PlatformRouteDetails[] = [];\n  #controllers: RouteController[] = [];\n\n  constructor(readonly injector: InjectorService, readonly platformApplication: PlatformApplication) {}\n\n  get app() {\n    return this.platformApplication;\n  }\n\n  get routes(): PlatformRouteDetails[] {\n    return this.#routes;\n  }\n\n  public addRoutes(routes: Route[]) {\n    routes.forEach((routeSettings) => {\n      this.addRoute(routeSettings.route, routeSettings.token);\n    });\n  }\n\n  public addRoute(endpoint: string, token: TokenProvider) {\n    const {injector} = this;\n\n    if (injector.hasProvider(token)) {\n      const provider: ControllerProvider = injector.getProvider(token)! as any;\n\n      if (provider.type === ProviderType.CONTROLLER) {\n        const route = getControllerPath(endpoint, provider);\n        if (!provider.hasParent()) {\n          const routes = this.buildRoutes(route, provider);\n\n          this.#routes.push(...routes);\n          this.#controllers.push({\n            route,\n            provider\n          });\n\n          this.app.use(route, ...[].concat(provider.getRouter().callback()));\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {PlatformRouteDetails[]}\n   */\n  public getRoutes(): PlatformRouteDetails[] {\n    return this.#routes;\n  }\n\n  public getMountedControllers(): RouteController[] {\n    return this.#controllers;\n  }\n\n  /**\n   *\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(endpointUrl: string, ctrl: ControllerProvider): PlatformRouteDetails[] {\n    const {injector} = this;\n\n    let routes: PlatformRouteDetails[] = [];\n\n    routes = ctrl.children\n      .map((ctrl) => injector.getProvider(ctrl))\n      .reduce((routes: PlatformRouteDetails[], provider: ControllerProvider) => {\n        return routes.concat(this.buildRoutes(`${endpointUrl}${provider.path}`, provider));\n      }, routes);\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      endpoint.operationPaths.forEach(({path, method}) => {\n        if (method) {\n          routes.push(\n            new PlatformRouteDetails({\n              provider: ctrl,\n              endpoint,\n              method,\n              url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\")\n            })\n          );\n        }\n      });\n    });\n\n    return routes;\n  }\n}\n"]}