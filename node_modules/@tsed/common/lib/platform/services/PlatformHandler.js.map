{"version":3,"file":"PlatformHandler.js","sourceRoot":"","sources":["../../../src/platform/services/PlatformHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import {isBoolean, isFunction, isNumber, isStream, isString} from \"@tsed/core\";\nimport {Injectable, InjectorService, Provider, ProviderScope} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport {\n  ConverterService,\n  EndpointMetadata,\n  HandlerMetadata,\n  HandlerType,\n  ParamMetadata,\n  ParamTypes,\n  PlatformRouteWithoutHandlers\n} from \"../../mvc\";\nimport {PlatformResponseFilter} from \"../../platform-response-filter/services/PlatformResponseFilter\";\nimport {HandlerContext, HandlerContextStatus} from \"../domain/HandlerContext\";\nimport {PlatformContext} from \"../domain/PlatformContext\";\nimport {ParamValidationError} from \"../errors/ParamValidationError\";\nimport {createHandlerMetadata} from \"../utils/createHandlerMetadata\";\nimport {renderView} from \"../utils/renderView\";\nimport {setResponseHeaders} from \"../utils/setResponseHeaders\";\n\nexport interface OnRequestOptions {\n  $ctx: PlatformContext;\n  metadata: HandlerMetadata;\n  next?: any;\n  err?: any;\n\n  [key: string]: any;\n}\n\nfunction shouldBeSent(data: any) {\n  return Buffer.isBuffer(data) || isBoolean(data) || isNumber(data) || isString(data) || data === null;\n}\n\nfunction shouldBeSerialized(data: any) {\n  return !(isStream(data) || shouldBeSent(data) || data === undefined);\n}\n\n/**\n * Platform Handler abstraction layer. Wrap original class method to a pure platform handler (Express, Koa, etc...).\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class PlatformHandler {\n  constructor(protected injector: InjectorService) {}\n\n  /**\n   * Create a native middleware based on the given metadata and return an instance of HandlerContext\n   * @param input\n   * @param options\n   */\n  createHandler(input: EndpointMetadata | HandlerMetadata | any, options: PlatformRouteWithoutHandlers = {}) {\n    const metadata: HandlerMetadata = this.createHandlerMetadata(input, options);\n    this.buildPipe(metadata);\n    return this.createRawHandler(metadata);\n  }\n\n  createCustomHandler(provider: Provider, propertyKey: string) {\n    const metadata = new HandlerMetadata({\n      token: provider.provide,\n      target: provider.useClass,\n      type: HandlerType.CUSTOM,\n      scope: provider.scope,\n      propertyKey\n    });\n    this.buildPipe(metadata);\n    return this.createRawHandler(metadata);\n  }\n\n  /**\n   * Create handler metadata\n   * @param obj\n   * @param routeOptions\n   */\n  public createHandlerMetadata(obj: any | EndpointMetadata, routeOptions: PlatformRouteWithoutHandlers = {}): HandlerMetadata {\n    return createHandlerMetadata(this.injector, obj, routeOptions);\n  }\n\n  /**\n   * Send the response to the consumer.\n   * @param data\n   * @param ctx\n   * @protected\n   */\n  async flush(data: any, ctx: PlatformContext) {\n    const {response, endpoint} = ctx;\n\n    if (endpoint) {\n      if (endpoint.view) {\n        data = await this.render(data, ctx);\n      } else if (shouldBeSerialized(data)) {\n        data = this.injector.get<ConverterService>(ConverterService)!.serialize(data, {\n          ...endpoint.getResponseOptions(),\n          endpoint: true\n        });\n      }\n    }\n\n    if (!response.isDone()) {\n      const responseFilter = this.injector.get<PlatformResponseFilter>(PlatformResponseFilter)!;\n\n      response.body(responseFilter.transform(data, ctx));\n    }\n  }\n\n  /**\n   * Allow handler hack for AsyncHookContext plugin.\n   * @param $ctx\n   * @param cb\n   * @protected\n   */\n  run($ctx: PlatformContext, cb: any) {\n    return cb();\n  }\n\n  /**\n   * Get argument from parameter medata or handler context.\n   * @param type\n   * @param h\n   */\n  protected getArg(type: ParamTypes | string, h: HandlerContext) {\n    const {$ctx} = h;\n\n    switch (type) {\n      case ParamTypes.NODE_RESPONSE:\n        return $ctx.getRes();\n\n      case ParamTypes.NODE_REQUEST:\n        return $ctx.getReq();\n\n      case ParamTypes.FILES:\n        return $ctx.getRequest().files;\n\n      case ParamTypes.RESPONSE:\n        return $ctx.getResponse();\n\n      case ParamTypes.REQUEST:\n        return $ctx.getRequest();\n\n      case ParamTypes.PLATFORM_RESPONSE:\n        return $ctx.response;\n\n      case ParamTypes.PLATFORM_REQUEST:\n        return $ctx.request;\n\n      case ParamTypes.NEXT_FN:\n        return h.next;\n\n      case ParamTypes.ERR:\n        return h.err;\n\n      case ParamTypes.$CTX: // tsed ctx\n        return $ctx;\n\n      case ParamTypes.ENDPOINT_INFO:\n        return $ctx.endpoint;\n\n      case ParamTypes.RESPONSE_DATA:\n        return $ctx.data;\n\n      case ParamTypes.BODY:\n        return $ctx.request.body;\n\n      case ParamTypes.RAW_BODY:\n        return $ctx.request.rawBody;\n\n      case ParamTypes.QUERY:\n        return $ctx.request.query;\n\n      case ParamTypes.PATH:\n        return $ctx.request.params;\n\n      case ParamTypes.HEADER:\n        return $ctx.request.headers;\n\n      case ParamTypes.COOKIES:\n        return $ctx.request.cookies;\n\n      case ParamTypes.SESSION:\n        return $ctx.request.session;\n\n      case ParamTypes.LOCALS:\n        return $ctx.response.locals;\n\n      default:\n        return $ctx.getRequest();\n    }\n  }\n\n  protected async onCtxRequest(requestOptions: OnRequestOptions): Promise<any> {\n    const {metadata, $ctx} = requestOptions;\n\n    await metadata.handler($ctx);\n\n    return this.next(requestOptions);\n  }\n\n  /**\n   * Call handler when a request his handle\n   * @param requestOptions\n   */\n  protected async onRequest(requestOptions: OnRequestOptions): Promise<any> {\n    // istanbul ignore next\n    if (!requestOptions.$ctx) {\n      $log.error(\n        `Endpoint ${requestOptions.metadata.toString()} is called but the response is already send to your consumer. Check your code and his middlewares please!`\n      );\n      return;\n    }\n\n    const h = new HandlerContext({\n      ...requestOptions,\n      args: []\n    });\n    const {$ctx} = h;\n\n    return this.run($ctx, async () => {\n      try {\n        h.args = await this.getArgs(h);\n\n        await h.callHandler();\n\n        if (h.status === HandlerContextStatus.RESOLVED) {\n          // Can be canceled by the handler itself\n          return await this.onSuccess($ctx.data, requestOptions);\n        }\n      } catch (er) {\n        return this.onError(er, requestOptions);\n      }\n    });\n  }\n\n  protected async onError(er: unknown, requestOptions: OnRequestOptions) {\n    const {next, $ctx} = requestOptions;\n    $ctx.data = er;\n\n    if (!next) {\n      throw er;\n    }\n\n    return !$ctx.response.isHeadersSent() && next && next(er);\n  }\n\n  /**\n   * Manage success scenario\n   * @param data\n   * @param requestOptions\n   * @protected\n   */\n  protected async onSuccess(data: any, requestOptions: OnRequestOptions) {\n    const {metadata, $ctx, next} = requestOptions;\n\n    if ($ctx.request.isAborted() || $ctx.response.isDone()) {\n      return;\n    }\n\n    // set headers each times that an endpoint is called\n    if (metadata.type === HandlerType.ENDPOINT) {\n      this.setHeaders($ctx);\n    }\n\n    // call returned middleware\n    if (isFunction(data) && !isStream(data)) {\n      return this.callReturnedMiddleware(data, $ctx, next);\n    }\n\n    if (metadata.isFinal()) {\n      return this.flush(data, $ctx);\n    }\n\n    return this.next(requestOptions);\n  }\n\n  /**\n   * Call the returned middleware by the handler.\n   * @param middleware\n   * @param ctx\n   * @param next\n   * @protected\n   */\n  protected callReturnedMiddleware(middleware: any, ctx: PlatformContext, next: any) {\n    return middleware(ctx.getRequest(), ctx.getResponse(), next);\n  }\n\n  /**\n   * Render the view if the endpoint has a configured view.\n   * @param data\n   * @param ctx\n   * @protected\n   */\n  protected async render(data: any, ctx: PlatformContext) {\n    return renderView(data, ctx);\n  }\n\n  /**\n   * create Raw handler\n   * @param metadata\n   */\n  protected createRawHandler(metadata: HandlerMetadata): Function {\n    switch (metadata.type) {\n      case HandlerType.CUSTOM:\n        return (ctx: PlatformContext, next: any) => this.onRequest({metadata, next, $ctx: ctx});\n      case HandlerType.RAW_ERR_FN:\n      case HandlerType.RAW_FN:\n        return metadata.handler;\n\n      default:\n      case HandlerType.ENDPOINT:\n      case HandlerType.MIDDLEWARE:\n        return (request: any, response: any, next: any) => this.onRequest({metadata, next, $ctx: request.$ctx});\n    }\n  }\n\n  private buildPipe(metadata: HandlerMetadata) {\n    if (metadata.injectable) {\n      metadata.parameters.forEach((param: ParamMetadata) => {\n        param.cachePipes(this.injector);\n      });\n    }\n  }\n\n  /**\n   * Set response headers\n   * @param ctx\n   * @protected\n   */\n  protected setHeaders(ctx: PlatformContext) {\n    return setResponseHeaders(ctx);\n  }\n\n  protected next(requestOptions: OnRequestOptions) {\n    const {$ctx, next} = requestOptions;\n\n    return !$ctx.response.isDone() && next && next();\n  }\n\n  /**\n   * Return arguments to call handler\n   * @param h\n   */\n  private async getArgs(h: HandlerContext) {\n    const {\n      metadata: {parameters}\n    } = h;\n\n    return Promise.all(parameters.map((param) => this.mapArg(param, h)));\n  }\n\n  /**\n   * Map argument by calling pipe.\n   * @param metadata\n   * @param h\n   */\n  private async mapArg(metadata: ParamMetadata, h: HandlerContext) {\n    const value = this.getArg(metadata.paramType, h);\n\n    return metadata.getPipes().reduce(async (value, pipe) => {\n      value = await value;\n\n      try {\n        return await pipe.transform(value, metadata);\n      } catch (er) {\n        throw ParamValidationError.from(metadata, er);\n      }\n    }, value);\n  }\n}\n"]}