{"version":3,"file":"PlatformCache.js","sourceRoot":"","sources":["../../../src/platform-cache/services/PlatformCache.ts"],"names":[],"mappings":"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","sourcesContent":["import {isClass, isFunction} from \"@tsed/core\";\nimport {Configuration, Injectable} from \"@tsed/di\";\nimport {deserialize, JsonDeserializerOptions, serialize} from \"@tsed/json-mapper\";\nimport cacheManager, {Cache, CachingConfig, MultiCache, TtlFunction} from \"cache-manager\";\nimport {PlatformContext} from \"../../platform/domain/PlatformContext\";\nimport {PlatformCacheSettings} from \"../interfaces\";\nimport micromatch from \"micromatch\";\n\nconst defaultKeyResolver = (args: any[]) => {\n  return args.map((arg: any) => (isClass(arg) ? JSON.stringify(serialize(arg)) : arg)).join(\":\");\n};\n\nexport type CacheManager = (Cache | MultiCache) & {\n  keys?(): Promise<string[]>;\n};\n\n/**\n * @platform\n */\n@Injectable()\nexport class PlatformCache {\n  @Configuration()\n  settings: Configuration;\n\n  cache: CacheManager | undefined;\n\n  disabled(): boolean {\n    return !this.settings.get<PlatformCacheSettings>(\"cache\");\n  }\n\n  $onInit() {\n    const settings = this.settings.get<PlatformCacheSettings>(\"cache\");\n\n    if (settings) {\n      const {caches, store = \"memory\", ttl, ...props} = settings;\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      this.cache = caches?.length\n        ? cacheManager.multiCaching(caches, {...props})\n        : cacheManager.caching({\n            ...props,\n            ttl,\n            store\n          });\n    }\n  }\n\n  defaultKeyResolver() {\n    return this.settings.get<(args: any[], ctx?: PlatformContext) => string>(\"cache.keyResolver\", defaultKeyResolver);\n  }\n\n  defaultTtl() {\n    return this.settings.get<number | TtlFunction>(\"cache.ttl\");\n  }\n\n  ttl(result?: any, currentTtl?: number | TtlFunction) {\n    const ttl = currentTtl === undefined ? this.defaultTtl() : currentTtl;\n\n    return isFunction(ttl) ? ttl(result) : ttl;\n  }\n\n  wrap<T>(key: string, fetch: () => Promise<T>, options?: CachingConfig): Promise<T> {\n    if (!this.cache) {\n      return fetch();\n    }\n\n    return this.cache?.wrap<T>(key, fetch, options as any);\n  }\n\n  async get<T>(key: string, options: JsonDeserializerOptions = {}): Promise<T | undefined> {\n    return deserialize(this.cache?.get<T>(key), options);\n  }\n\n  async set<T>(key: string, value: any, options?: CachingConfig): Promise<T | undefined> {\n    return this.cache?.set<T>(key, value, options);\n  }\n\n  async del(key: string): Promise<void> {\n    await this.cache?.del(key);\n  }\n\n  async reset(): Promise<void> {\n    // @ts-ignore\n    await this.cache?.reset();\n  }\n\n  async keys(): Promise<string[]> {\n    if (this.cache?.keys) {\n      return this.cache.keys();\n    }\n    // istanbul ignore next\n    return [];\n  }\n\n  async getMatchingKeys(patterns: string): Promise<string[]> {\n    const keys = await this.keys();\n\n    return micromatch(keys, patterns);\n  }\n\n  async deleteMatchingKeys(patterns: string): Promise<string[]> {\n    const keys = await this.getMatchingKeys(patterns);\n\n    await Promise.all(keys.map((key: string) => this.del(key)));\n\n    return keys;\n  }\n}\n"]}