{"version":3,"file":"ConverterService.js","sourceRoot":"","sources":["../../../src/mvc/services/ConverterService.ts"],"names":[],"mappings":";;;;;AAAA,iCAAoE;AACpE,mDAAyG;AAIzG,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAG3B,YAAoB,eAAgC,EAAmB,aAA4B;QAA/E,oBAAe,GAAf,eAAe,CAAiB;QAFpD,qCAAsC;QAGpC,+BAAA,IAAI,sBAAsB,aAAa,CAAC,GAAG,CAAoB,WAAW,CAAC,IAAI,EAAE,EAAC;IACpF,CAAC;IAED;;;;;OAKG;IACH,SAAS,CAAC,GAAQ,EAAE,UAAiC,EAAE;QACrD,OAAO,uBAAS,CAAC,GAAG,EAAE;YACpB,QAAQ,EAAE,IAAI;YACd,oBAAoB,EAAE,yDAAwB,oBAAoB,KAAK,QAAQ;YAC/E,GAAG,OAAO;SACX,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;OAWG;IACH,WAAW,CAAC,GAAQ,EAAE,UAAmC,EAAE;QACzD,OAAO,yBAAW,CAAC,GAAG,EAAE;YACtB,QAAQ,EAAE,IAAI;YACd,oBAAoB,EAAE,yDAAwB,oBAAoB,KAAK,QAAQ;YAC/E,GAAG,OAAO;SACX,CAAC,CAAC;IACL,CAAC;CACF,CAAA;;AAxCY,gBAAgB;IAD5B,eAAU,EAAE;IAI4C,mBAAA,kBAAa,EAAE,CAAA;6CAAjC,oBAAe;GAHzC,gBAAgB,CAwC5B;AAxCY,4CAAgB","sourcesContent":["import {Configuration, Injectable, InjectorService} from \"@tsed/di\";\nimport {deserialize, JsonDeserializerOptions, JsonSerializerOptions, serialize} from \"@tsed/json-mapper\";\nimport {ConverterSettings} from \"../../config/interfaces/ConverterSettings\";\n\n@Injectable()\nexport class ConverterService {\n  #converterSettings: ConverterSettings;\n\n  constructor(private injectorService: InjectorService, @Configuration() configuration: Configuration) {\n    this.#converterSettings = configuration.get<ConverterSettings>(\"converter\") || {};\n  }\n\n  /**\n   * Convert instance to plainObject.\n   *\n   * @param obj\n   * @param options\n   */\n  serialize(obj: any, options: JsonSerializerOptions = {}): any {\n    return serialize(obj, {\n      useAlias: true,\n      additionalProperties: this.#converterSettings.additionalProperties === \"accept\",\n      ...options\n    });\n  }\n\n  /**\n   * Convert a plainObject to targetType.\n   *\n   * ### Options\n   *\n   * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj Object source that will be deserialized\n   * @param options Mapping options\n   * @returns {any}\n   */\n  deserialize(obj: any, options: JsonDeserializerOptions = {}): any {\n    return deserialize(obj, {\n      useAlias: true,\n      additionalProperties: this.#converterSettings.additionalProperties === \"accept\",\n      ...options\n    });\n  }\n}\n"]}