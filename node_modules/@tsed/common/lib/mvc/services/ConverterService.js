"use strict";
var _converterSettings;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConverterService = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const json_mapper_1 = require("@tsed/json-mapper");
let ConverterService = class ConverterService {
    constructor(injectorService, configuration) {
        this.injectorService = injectorService;
        _converterSettings.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _converterSettings, configuration.get("converter") || {});
    }
    /**
     * Convert instance to plainObject.
     *
     * @param obj
     * @param options
     */
    serialize(obj, options = {}) {
        return json_mapper_1.serialize(obj, {
            useAlias: true,
            additionalProperties: tslib_1.__classPrivateFieldGet(this, _converterSettings).additionalProperties === "accept",
            ...options
        });
    }
    /**
     * Convert a plainObject to targetType.
     *
     * ### Options
     *
     * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.
     * - `checkRequiredValue`: Disable the required check condition.
     *
     * @param obj Object source that will be deserialized
     * @param options Mapping options
     * @returns {any}
     */
    deserialize(obj, options = {}) {
        return json_mapper_1.deserialize(obj, {
            useAlias: true,
            additionalProperties: tslib_1.__classPrivateFieldGet(this, _converterSettings).additionalProperties === "accept",
            ...options
        });
    }
};
_converterSettings = new WeakMap();
ConverterService = tslib_1.__decorate([
    di_1.Injectable(),
    tslib_1.__param(1, di_1.Configuration()),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService, Object])
], ConverterService);
exports.ConverterService = ConverterService;
//# sourceMappingURL=ConverterService.js.map