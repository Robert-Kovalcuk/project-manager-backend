{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/class/controller.ts"],"names":[],"mappings":";;;AAAA,qCAA4D;AAC5D,iCAAuD;AAgBvD,SAAS,UAAU,CAAC,OAAY;IAC9B,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,YAAY,MAAM,IAAI,0BAAmB,CAAC,OAAO,CAAC,EAAE;QAC5F,OAAO;YACL,IAAI,EAAE,OAAO;SACd,CAAC;KACH;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,SAAgB,UAAU,CAAC,OAA2C;IACpE,MAAM,EAAC,QAAQ,GAAG,EAAE,EAAE,GAAG,IAAI,EAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IAErD,OAAO,CAAC,MAAM,EAAE,EAAE;QAChB,uBAAkB,CAAC;YACjB,OAAO,EAAE,MAAM;YACf,GAAG,IAAI;SACR,CAAC,CAAC;QAEH,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;QAExD,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAC9B,YAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAfD,gCAeC","sourcesContent":["import {isArrayOrArrayClass, Store, Type} from \"@tsed/core\";\nimport {IProvider, registerController} from \"@tsed/di\";\nimport {PathParamsType} from \"../../interfaces\";\n\nexport interface ControllerMiddlewares {\n  useBefore: any[];\n  use: any[];\n  useAfter: any[];\n}\n\nexport interface ControllerOptions extends Partial<IProvider<any>> {\n  path?: PathParamsType;\n  children?: Type<any>[];\n  routerOptions?: any;\n  middlewares?: Partial<ControllerMiddlewares>;\n}\n\nfunction mapOptions(options: any): ControllerOptions {\n  if (typeof options === \"string\" || options instanceof RegExp || isArrayOrArrayClass(options)) {\n    return {\n      path: options\n    };\n  }\n\n  return options;\n}\n\n/**\n * Declare a new controller with his Rest path. His methods annotated will be collected to build the routing list.\n * This routing listing will be built with the `express.Router` object.\n *\n * ::: tip\n * See [Controllers](/docs/controllers.md) section for more details\n * :::\n *\n * ```typescript\n *  @Controller(\"/calendars\")\n *  export provide CalendarCtrl {\n *\n *    @Get(\"/:id\")\n *    public get(\n *      @Req() request: Req,\n *      @Res() response: Res,\n *      @Next() next: Next\n *    ): void {\n *\n *    }\n *  }\n * ```\n *\n * @param options\n * @controller\n * @decorator\n * @classDecorator\n */\nexport function Controller(options: PathParamsType | ControllerOptions): ClassDecorator {\n  const {children = [], ...opts} = mapOptions(options);\n\n  return (target) => {\n    registerController({\n      provide: target,\n      ...opts\n    });\n\n    Store.from(target).set(\"childrenControllers\", children);\n\n    children.forEach((childToken) => {\n      Store.from(childToken).set(\"parentController\", target);\n    });\n  };\n}\n"]}