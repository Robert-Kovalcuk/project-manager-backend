{"version":3,"file":"formats.js","sourceRoot":"","sources":["../../src/decorators/formats.ts"],"names":[],"mappings":";;;AAAA,qCAAmD;AACnD,iCAAoC;AAIpC;;;;;;GAMG;AACH,SAAgB,OAAO,CAAC,IAAY,EAAE,UAA0B,EAAE;IAChE,OAAO,oBAAa,CAClB,eAAU,CAAC;QACT,IAAI,EAAE,aAAa;KACpB,CAAC,EACF,eAAQ,CAAC,aAAa,EAAE;QACtB,IAAI;QACJ,OAAO;KACR,CAAC,CACH,CAAC;AACJ,CAAC;AAVD,0BAUC","sourcesContent":["import {StoreSet, useDecorators} from \"@tsed/core\";\nimport {Injectable} from \"@tsed/di\";\nimport {JsonSchema} from \"@tsed/schema\";\nimport {AnySchemaObject, AsyncFormatDefinition, FormatDefinition, KeywordDefinition} from \"ajv\";\nexport type FormatsOptions = Omit<FormatDefinition<any>, \"validate\" | \"compare\"> | Omit<AsyncFormatDefinition<any>, \"validate\" | \"compare\">;\n/**\n * Create a new custom formats validator\n * @param name\n * @param options\n * @decorator\n * @ajv\n */\nexport function Formats(name: string, options: FormatsOptions = {}): ClassDecorator {\n  return useDecorators(\n    Injectable({\n      type: \"ajv:formats\"\n    }),\n    StoreSet(\"ajv:formats\", {\n      name,\n      options\n    })\n  );\n}\n"]}