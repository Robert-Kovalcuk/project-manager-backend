import { PlatformContext } from "@tsed/common";
import { InjectorService, Provider } from "@tsed/di";
import { Strategy } from "passport";
/**
 * @ignore
 */
export declare class ProtocolsService {
    private injector;
    readonly strategies: Map<string, Strategy>;
    constructor(injector: InjectorService);
    getProtocols(): Provider[];
    getProtocolsNames(): string[];
    /**
     * Invoke provider and bind it to passport.
     * @param provider
     */
    invoke(provider: Provider): any;
    /**
     * Call authenticate passport method.
     * @param protocols
     * @param options
     * @param ctx
     */
    authenticate(protocols: string | string[], options: Record<string, any>, ctx: PlatformContext): Promise<void>;
    /**
     * Call authorize passport method.
     * @param protocols
     * @param options
     * @param ctx
     */
    authorize(protocols: string | string[], options: Record<string, any>, ctx: PlatformContext): Promise<void>;
    /**
     * Call passport authenticate or authorize depending on the chosen method.
     * @param method
     * @param protocols
     * @param options
     * @param ctx
     * @private
     */
    private call;
    /**
     * Create strategy options based on decorator metadata and global configuration
     * @param provider
     * @private
     */
    private getOptions;
    /**
     * Create the verifier handler for passport
     * @param provider
     * @private
     */
    private createHandler;
}
